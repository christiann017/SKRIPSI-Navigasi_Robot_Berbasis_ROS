import rosbag
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tf.transformations as transformations
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry

def quaternion_to_yaw(q):
    """ Convert a quaternion into a yaw angle (in radians). """
    euler = transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])
    yaw = euler[2]
    return yaw

def extract_position_orientation_from_bag(bag_file):
    bag = rosbag.Bag(bag_file)
    odom_data = []

    for topic, msg, t in bag.read_messages(topics=['/odom', '/pose']):
        timestamp = t.to_sec()
        if topic == '/odom':
            position = msg.pose.pose.position
            orientation = msg.pose.pose.orientation
        elif topic == '/pose':
            position = msg.pose.position
            orientation = msg.pose.orientation

        yaw = quaternion_to_yaw(orientation)
        
        odom_data.append({
            'timestamp': timestamp,
            'position_x': position.x,
            'position_y': position.y,
            'orientation_yaw': yaw,
        })
    print("X pos:",position.x)
    print("Y pos:",position.y)
    print("Z pos:",yaw)
    bag.close()
    return odom_data
#bag = rosbag.Bag('sl_data.bag')
bag = rosbag.Bag(bag_file)
odom_data = []
for topic, msg, t in bag.read_messages(topics=['/odom']):
    position = msg.pose.pose.position
    odom_data.append((position.x, position.y))
    yaw = quaternion_to_yaw(orientation)
    odom.data.append({
    })

    bag.close()
"""def main():
    bag_file = 'sl_data.bag'
    odom_data = extract_position_orientation_from_bag(bag_file)
    plt.plot(odom_data[:, 0], odom_data[:, 1])
    plt.xlabel('X Position')
    plt.ylabel('Y Position')
    plt.title('Odometry Data')
    plt.show()

if __name__ == "__main__":
    main()"""

odom_data = np.array(odom_data)

plt.plot(odom_data[:, 0], odom_data[:, 1])
plt.xlabel('X Position')
plt.ylabel('Y Position')
plt.title('Odometry Data')
plt.show()


